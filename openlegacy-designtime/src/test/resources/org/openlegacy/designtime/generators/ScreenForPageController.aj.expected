// WARNING: DO NOT EDIT THIS FILE.
// You may push code into the target .java compilation unit if you wish to edit any member(s).
package org.openlegacy.terminal.layout.mock.web;

import java.util.*;
import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;

import org.openlegacy.terminal.layout.mock.*;

import org.openlegacy.terminal.ScreenEntity;
import org.openlegacy.terminal.TerminalSession;
import org.openlegacy.terminal.actions.TerminalActions;
import org.openlegacy.terminal.spi.ScreenEntitiesRegistry;
import org.openlegacy.terminal.web.JsonSerializationUtil;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ResponseBody;

import org.openlegacy.terminal.layout.mock.ScreenForPage;

privileged @SuppressWarnings("unused") aspect ScreenForPageController_Aspect {

	@Inject
	private TerminalSession ScreenForPageController.terminalSession;

	@Inject
	private ScreenEntitiesRegistry ScreenForPageController.screenEntitiesRegistry;

	// handle page initial display
    @RequestMapping(method = RequestMethod.GET)
    public String ScreenForPageController.show(Model uiModel) {
    	ScreenForPage screenForPage = terminalSession.getEntity(ScreenForPage.class);
	uiModel.addAttribute("screenForPage", screenForPage);
	// show the resulting page for ScreenForPage
        return "ScreenForPage";
    }

	// handle submit action
    @RequestMapping(method = RequestMethod.POST)
    public String ScreenForPageController.submit(ScreenForPage screenForPage, Model uiModel, HttpServletRequest httpServletRequest) {
	ScreenEntity resultScreenEntity = terminalSession.doAction(TerminalActions.ENTER(), screenForPage);
	// go to the controller for the resulting screen name
		if (resultScreenEntity != null){
        	return "redirect:" + screenEntitiesRegistry.get(resultScreenEntity.getClass()).getEntityClassName();
		}
    	return "redirect:HtmlEmulation";
    }
    
	// handle help action
    @RequestMapping(params="action=help", method = RequestMethod.POST)
    public String ScreenForPageController.help(ScreenForPage screenForPage, Model uiModel, HttpServletRequest httpServletRequest) {
	ScreenEntity resultScreenEntity = terminalSession.doAction(TerminalActions.F1(), screenForPage);
	// go to the controller for the resulting screen name
		if (resultScreenEntity != null){
        	return "redirect:" + screenEntitiesRegistry.get(resultScreenEntity.getClass()).getEntityClassName();
		}
    	return "redirect:HtmlEmulation";
		
    }
	// handle exit action
    @RequestMapping(params="action=exit", method = RequestMethod.POST)
    public String ScreenForPageController.exit(ScreenForPage screenForPage, Model uiModel, HttpServletRequest httpServletRequest) {
	ScreenEntity resultScreenEntity = terminalSession.doAction(TerminalActions.F3(), screenForPage);
	// go to the controller for the resulting screen name
		if (resultScreenEntity != null){
        	return "redirect:" + screenEntitiesRegistry.get(resultScreenEntity.getClass()).getEntityClassName();
		}
    	return "redirect:HtmlEmulation";
		
    }

	
	// handle ajax request for fldRow10 field
	@RequestMapping(value="/fldRow10", method = RequestMethod.GET)
    @ResponseBody
	public ResponseEntity<String> ScreenForPageController.FldRow10Json() {
    	ScreenForPage screenForPage = terminalSession.getEntity(ScreenForPage.class);
    	
		HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/text; charset=utf-8");
		Map<Object,Object> fldRow10Values = screenForPage.getFldRow10Values();
		
		String result = JsonSerializationUtil.toDojoFormat(fldRow10Values);
        return new ResponseEntity<String>(result, headers, HttpStatus.OK);
    }
	
	
}
