package org.openlegacy.designtime.generators.mock.web;

import org.springframework.stereotype.Controller;

import java.util.*;
import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.io.IOUtils;
import org.openlegacy.designtime.generators.mock.*;

import java.io.IOException;
import org.openlegacy.modules.table.Table;
import org.openlegacy.modules.table.TableWriter;
import java.net.MalformedURLException;
import java.net.URL;
import java.text.SimpleDateFormat;
import org.springframework.beans.propertyeditors.CustomDateEditor;

import org.openlegacy.mvc.MvcUtils;
import org.openlegacy.terminal.ScreenEntity;
import org.openlegacy.terminal.TerminalSession;
import org.openlegacy.terminal.actions.TerminalActions;
import org.openlegacy.terminal.services.ScreenEntitiesRegistry;
import org.openlegacy.terminal.json.JsonSerializationUtil;

import org.openlegacy.definitions.TableDefinition;
import java.util.Map.Entry;
import org.openlegacy.terminal.definitions.ScreenTableDefinition;
import org.openlegacy.terminal.modules.table.ScrollableTableUtil;
import org.openlegacy.terminal.providers.TablesDefinitionProvider;
import org.openlegacy.terminal.support.binders.MultyScreenTableBindUtil;
import org.openlegacy.terminal.utils.ScreenEntityUtils;

import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.WebDataBinder;

import flexjson.JSONSerializer;

/**
 * Handles requests for screen ScreenForPagewithKey
 */
@Controller
@RequestMapping("/ScreenForPagewithKey")
public class ScreenForPagewithKeyController {

	@Inject
	private TerminalSession terminalSession;

	@Inject
	private ScreenEntitiesRegistry screenEntitiesRegistry;

	
	@Inject
	private MultyScreenTableBindUtil tableBindUtil;
	

	// handle page with keys ajax call display
    @RequestMapping(value="/{id}", method = RequestMethod.GET, headers = "X-Requested-With=XMLHttpRequest")
    public String ajax(@PathVariable("id") Object id, Model uiModel) {
    	return show(id,uiModel);
    }

	// handle page with keys initial display
    @RequestMapping(value="/{id}", method = RequestMethod.GET)
    public String show(@PathVariable("id") Object id, Model uiModel) {
    	ScreenForPagewithKey screenForPagewithKey = terminalSession.getEntity(ScreenForPagewithKey.class,id);
	uiModel.addAttribute("screenForPagewithKey", screenForPagewithKey);
	// show the resulting page for ScreenForPagewithKey
        return "ScreenForPagewithKey";
    }
	
    @RequestMapping(value="/online-help", method = RequestMethod.GET)
    public @ResponseBody String systemHelp(HttpServletRequest request) throws IOException {
    	URL resource = request.getSession().getServletContext().getResource("/help/ScreenForPagewithKey.html");
    	String result = "";
    	if (resource != null){
    		result = IOUtils.toString(resource.openStream());
    	}
    	return result;
    }

	// handle doSubmit action
    @RequestMapping(method = RequestMethod.POST)
    public String doSubmit(ScreenForPagewithKey screenForPagewithKey, Model uiModel, HttpServletRequest httpServletRequest) {
	ScreenEntity resultScreenEntity = terminalSession.doAction(TerminalActions.ENTER(), screenForPagewithKey);
	// go to the controller for the resulting screen name
		if (resultScreenEntity != null){
			String screenEntityName = screenEntitiesRegistry.get(resultScreenEntity.getClass()).getEntityClassName();
			if (httpServletRequest.getParameter("partial") != null || screenEntityName.equals("ScreenForPagewithKey")){
				screenForPagewithKey = terminalSession.getEntity(ScreenForPagewithKey.class);
		    	uiModel.addAttribute("screenForPagewithKey", screenForPagewithKey);
		        return "ScreenForPagewithKey";
			}
        	return "redirect:" + screenEntityName;
		}
    	return "redirect:/emulation";
		
    }
	
	// handle none action
    @RequestMapping(params="action=none", method = RequestMethod.POST)
    public String none(ScreenForPagewithKey screenForPagewithKey, Model uiModel, HttpServletRequest httpServletRequest) {
	ScreenEntity resultScreenEntity = terminalSession.doAction(TerminalActions.NONE(), screenForPagewithKey);
	// go to the controller for the resulting screen name
		if (resultScreenEntity != null){
			String screenEntityName = screenEntitiesRegistry.get(resultScreenEntity.getClass()).getEntityClassName();
			if (httpServletRequest.getParameter("partial") != null || screenEntityName.equals("ScreenForPagewithKey")){
				screenForPagewithKey = terminalSession.getEntity(ScreenForPagewithKey.class);
		    	uiModel.addAttribute("screenForPagewithKey", screenForPagewithKey);
		        return "ScreenForPagewithKey";
			}
        	return "redirect:" + screenEntityName;
		}
    	return "redirect:/emulation";
		
    }
	    
	
	
	@InitBinder
	public void initBinder(WebDataBinder binder) {
		MvcUtils.registerEditors(binder, screenEntitiesRegistry);
	}
	
}
