package org.openlegacy.designtime.terminal.generators.mock.web;

import org.springframework.stereotype.Controller;

import java.util.*;
import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.io.IOUtils;
import org.openlegacy.designtime.terminal.generators.mock.*;

import java.io.IOException;
import org.openlegacy.modules.table.Table;
import org.openlegacy.modules.table.TableWriter;
import java.net.MalformedURLException;
import java.net.URL;
import java.text.SimpleDateFormat;
import org.springframework.beans.propertyeditors.CustomDateEditor;

import org.openlegacy.mvc.MvcUtils;
import org.openlegacy.terminal.ScreenEntity;
import org.openlegacy.terminal.TerminalSession;
import org.openlegacy.terminal.actions.TerminalActions;
import org.openlegacy.terminal.services.ScreenEntitiesRegistry;
import org.openlegacy.terminal.json.JsonSerializationUtil;

import org.openlegacy.definitions.TableDefinition;
import java.util.Map.Entry;
import org.openlegacy.terminal.definitions.ScreenTableDefinition;
import org.openlegacy.terminal.modules.table.ScrollableTableUtil;
import org.openlegacy.terminal.providers.TablesDefinitionProvider;
import org.openlegacy.terminal.support.binders.MultyScreenTableBindUtil;
import org.openlegacy.terminal.utils.ScreenEntityUtils;

import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.WebDataBinder;

import flexjson.JSONSerializer;

/**
 * Handles requests for screen ScreenForPage
 */
@Controller
@RequestMapping("/ScreenForPage")
public class ScreenForPageController {

	@Inject
	private TerminalSession terminalSession;

	@Inject
	private ScreenEntitiesRegistry screenEntitiesRegistry;

	@Inject
	private TableWriter tableWriter;
	@Inject
	private TablesDefinitionProvider tablesDefinitionProvider;
	
	@Inject
	private MultyScreenTableBindUtil tableBindUtil;
	
	// handle page ajax call display
    @RequestMapping(method = RequestMethod.GET, headers = "X-Requested-With=XMLHttpRequest")
    public String ajax(Model uiModel) {
    	return show(uiModel);
    }
    
	// handle page initial display
    @RequestMapping(method = RequestMethod.GET)
    public String show(Model uiModel) {
    	ScreenForPage screenForPage = terminalSession.getEntity(ScreenForPage.class);
	uiModel.addAttribute("screenForPage", screenForPage);
	// show the resulting page for ScreenForPage
        return "ScreenForPage";
    }

	
    @RequestMapping(value="/online-help", method = RequestMethod.GET)
    public @ResponseBody String systemHelp(HttpServletRequest request) throws IOException {
    	URL resource = request.getSession().getServletContext().getResource("/help/ScreenForPage.html");
    	String result = "";
    	if (resource != null){
    		result = IOUtils.toString(resource.openStream());
    	}
    	return result;
    }

	// handle doSubmit action
    @RequestMapping(method = RequestMethod.POST)
    public String doSubmit(ScreenForPage screenForPage, Model uiModel, HttpServletRequest httpServletRequest) {
	ScreenEntity resultScreenEntity = terminalSession.doAction(TerminalActions.ENTER(), screenForPage);
	// go to the controller for the resulting screen name
		if (resultScreenEntity != null){
			String screenEntityName = screenEntitiesRegistry.get(resultScreenEntity.getClass()).getEntityClassName();
			if (httpServletRequest.getParameter("partial") != null || screenEntityName.equals("ScreenForPage")){
				screenForPage = terminalSession.getEntity(ScreenForPage.class);
		    	uiModel.addAttribute("screenForPage", screenForPage);
		        return "ScreenForPage";
			}
        	return "redirect:" + screenEntityName;
		}
    	return "redirect:/emulation";
		
    }
	
	// handle none action
    @RequestMapping(params="action=none", method = RequestMethod.POST)
    public String none(ScreenForPage screenForPage, Model uiModel, HttpServletRequest httpServletRequest) {
	ScreenEntity resultScreenEntity = terminalSession.doAction(TerminalActions.NONE(), screenForPage);
	// go to the controller for the resulting screen name
		if (resultScreenEntity != null){
			String screenEntityName = screenEntitiesRegistry.get(resultScreenEntity.getClass()).getEntityClassName();
			if (httpServletRequest.getParameter("partial") != null || screenEntityName.equals("ScreenForPage")){
				screenForPage = terminalSession.getEntity(ScreenForPage.class);
		    	uiModel.addAttribute("screenForPage", screenForPage);
		        return "ScreenForPage";
			}
        	return "redirect:" + screenEntityName;
		}
    	return "redirect:/emulation";
		
    }
	    
	// handle help action
    @RequestMapping(params="action=help", method = RequestMethod.POST)
    public String help(ScreenForPage screenForPage, Model uiModel, HttpServletRequest httpServletRequest) {
	ScreenEntity resultScreenEntity = terminalSession.doAction(TerminalActions.F1(), screenForPage);
	// go to the controller for the resulting screen name
		if (resultScreenEntity != null){
			String screenEntityName = screenEntitiesRegistry.get(resultScreenEntity.getClass()).getEntityClassName();
			if (httpServletRequest.getParameter("partial") != null || screenEntityName.equals("ScreenForPage")){
				screenForPage = terminalSession.getEntity(ScreenForPage.class);
		    	uiModel.addAttribute("screenForPage", screenForPage);
		        return "ScreenForPage";
			}
        	return "redirect:" + screenEntityName;
		}
    	return "redirect:/emulation";
		
    }
	// handle exit action
    @RequestMapping(params="action=exit", method = RequestMethod.POST)
    public String exit(ScreenForPage screenForPage, Model uiModel, HttpServletRequest httpServletRequest) {
	ScreenEntity resultScreenEntity = terminalSession.doAction(TerminalActions.F3(), screenForPage);
	// go to the controller for the resulting screen name
		if (resultScreenEntity != null){
			String screenEntityName = screenEntitiesRegistry.get(resultScreenEntity.getClass()).getEntityClassName();
			if (httpServletRequest.getParameter("partial") != null || screenEntityName.equals("ScreenForPage")){
				screenForPage = terminalSession.getEntity(ScreenForPage.class);
		    	uiModel.addAttribute("screenForPage", screenForPage);
		        return "ScreenForPage";
			}
        	return "redirect:" + screenEntityName;
		}
    	return "redirect:/emulation";
		
    }
	// handle previous action
    @RequestMapping(params="action=previous", method = RequestMethod.POST)
    public String previous(ScreenForPage screenForPage, Model uiModel, HttpServletRequest httpServletRequest) {
	ScreenEntity resultScreenEntity = terminalSession.doAction(TerminalActions.PAGEUP(), screenForPage);
	// go to the controller for the resulting screen name
		if (resultScreenEntity != null){
			String screenEntityName = screenEntitiesRegistry.get(resultScreenEntity.getClass()).getEntityClassName();
			if (httpServletRequest.getParameter("partial") != null || screenEntityName.equals("ScreenForPage")){
				screenForPage = terminalSession.getEntity(ScreenForPage.class);
		    	uiModel.addAttribute("screenForPage", screenForPage);
		        return "ScreenForPage";
			}
        	return "redirect:" + screenEntityName;
		}
    	return "redirect:/emulation";
		
    }
	// handle next action
    @RequestMapping(params="action=next", method = RequestMethod.POST)
    public String next(ScreenForPage screenForPage, Model uiModel, HttpServletRequest httpServletRequest) {
	ScreenEntity resultScreenEntity = terminalSession.doAction(TerminalActions.PAGEDOWN(), screenForPage);
	// go to the controller for the resulting screen name
		if (resultScreenEntity != null){
			String screenEntityName = screenEntitiesRegistry.get(resultScreenEntity.getClass()).getEntityClassName();
			if (httpServletRequest.getParameter("partial") != null || screenEntityName.equals("ScreenForPage")){
				screenForPage = terminalSession.getEntity(ScreenForPage.class);
		    	uiModel.addAttribute("screenForPage", screenForPage);
		        return "ScreenForPage";
			}
        	return "redirect:" + screenEntityName;
		}
    	return "redirect:/emulation";
		
    }
	
	// export to excel
    @SuppressWarnings({ "rawtypes", "unchecked" })
    @RequestMapping(value="/excel", method = RequestMethod.GET)
    public void excel(HttpServletResponse response) throws IOException {
    	List<ScreenForPage.ScreenForPageRecord> records = terminalSession.getModule(Table.class).collectOne(ScreenForPage.class,ScreenForPage.ScreenForPageRecord.class);
		response.setContentType("application/vnd.ms-excel");
		response.addHeader("Content-Disposition", "attachment; filename=\"ScreenForPage.xls\"");
		Entry<String, ScreenTableDefinition> tableDefinition = ScrollableTableUtil.getSingleScrollableTableDefinition(
				tablesDefinitionProvider, ScreenForPage.class);
    	tableWriter.writeTable(records, (TableDefinition)tableDefinition.getValue(),response.getOutputStream());
    }
	
	// handle json request for mobile "load more" 
	@RequestMapping(value = "/more", method = RequestMethod.GET)
	@ResponseBody
	public ResponseEntity<String> more() {
		ScreenForPage screenForPage = terminalSession.getEntity(ScreenForPage.class);
		screenForPage = terminalSession.doAction(TerminalActions.PAGEDOWN(), screenForPage);

		HttpHeaders headers = new HttpHeaders();
		headers.add("Content-Type", "application/text; charset=utf-8");

		String result = new JSONSerializer().serialize(screenForPage.getScreenForPageRecords());
		return new ResponseEntity<String>(result, headers, HttpStatus.OK);
	}	
	
	
	// handle ajax request for fldRow10 field
	@RequestMapping(value="/fldRow10Values", method = RequestMethod.GET)
    @ResponseBody
	public ResponseEntity<String> FldRow10Json(@RequestParam(value = "name", required = false) String text) {
    	ScreenForPage screenForPage = terminalSession.getEntity(ScreenForPage.class);
    	
		HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/text; charset=utf-8");

		if (text != null) {
			text = text.replace("*", "");
		}

		Map<Object, Object> fieldValues = tableBindUtil.getRecords(getSession(), text, screenEntityName, fieldName);

		
		String result = JsonSerializationUtil.toDojoFormat(fldRow10Values,text);
        return new ResponseEntity<String>(result, headers, HttpStatus.OK);
    }
	
	@InitBinder
	public void initBinder(WebDataBinder binder) {
		MvcUtils.registerEditors(binder, screenEntitiesRegistry);
	}
	
}
