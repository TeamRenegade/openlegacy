// WARNING: DO NOT EDIT THIS FILE.
// You may push code into the target .java compilation unit if you wish to edit any member(s).
package ${entityDefinition.packageName}.web;

import java.util.*;
import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;

import ${entityDefinition.packageName}.*;

import java.text.SimpleDateFormat;
import org.springframework.beans.propertyeditors.CustomDateEditor;

import org.openlegacy.terminal.ScreenEntity;
import org.openlegacy.terminal.TerminalSession;
import org.openlegacy.terminal.actions.TerminalActions;
import org.openlegacy.terminal.spi.ScreenEntitiesRegistry;
import org.openlegacy.terminal.web.JsonSerializationUtil;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.WebDataBinder;

import ${entityDefinition.packageName}.${entityDefinition.entityClassName};

privileged @SuppressWarnings("unused") aspect ${entityDefinition.entityClassName}Controller_Aspect {

	@Inject
	private TerminalSession ${entityDefinition.entityClassName}Controller.terminalSession;

	@Inject
	private ScreenEntitiesRegistry ${entityDefinition.entityClassName}Controller.screenEntitiesRegistry;

	// handle page initial display
    @RequestMapping(method = RequestMethod.GET<#if entityDefinition.child || entityDefinition.childScreensDefinitions?size &gt; 0>, params="partial=1"</#if>)
    public String ${entityDefinition.entityClassName}Controller.show(Model uiModel) {
    	${entityDefinition.entityClassName} ${entityDefinition.entityName?uncap_first} = terminalSession.getEntity(${entityDefinition.entityClassName}.class);
	uiModel.addAttribute("${entityDefinition.entityName?uncap_first}", ${entityDefinition.entityName?uncap_first});
	// show the resulting page for ${entityDefinition.entityClassName}
        return "${entityDefinition.entityClassName}";
    }

	<@postMethod actionName="ENTER" actionAlias="submit" params="" />
    
	<#list actions as action>
	<@postMethod actionName=action.actionName actionAlias=action.alias params=action.alias />
	</#list>	
	<#if entityDefinition.tableDefinitions?size &gt; 0>
	<@postMethod actionName="PAGEUP" actionAlias="previous" params="previous" />
	<@postMethod actionName="PAGEDOWN" actionAlias="next" params="next" />
	</#if>
	
	<#assign fields = entityDefinition.fieldsDefinitions?values>
	<#list fields as field>
		<#if field.fieldTypeDefinition?? && field.fieldTypeDefinition.class.simpleName = "SimpleAutoCompleteFieldTypeDefinition">
	
	// handle ajax request for ${field.name} field
	@RequestMapping(value="/${field.name}", method = RequestMethod.GET)
    @ResponseBody
	public ResponseEntity<String> ${entityDefinition.entityClassName}Controller.${field.name?cap_first}Json() {
    	${entityDefinition.entityClassName} ${entityDefinition.entityClassName?uncap_first} = terminalSession.getEntity(${entityDefinition.entityClassName}.class);
    	
		HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/text; charset=utf-8");
		Map<Object,Object> ${field.name}Values = ${entityDefinition.entityClassName?uncap_first}.get${field.name?cap_first}Values();
		
		String result = JsonSerializationUtil.toDojoFormat(${field.name}Values);
        return new ResponseEntity<String>(result, headers, HttpStatus.OK);
    }
		</#if>
	</#list>	
	
	@InitBinder
	public void ${entityDefinition.entityClassName}Controller.initBinder(WebDataBinder binder) {
		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
		dateFormat.setLenient(false);
		binder.registerCustomEditor(Date.class, new CustomDateEditor(dateFormat, false));
	}
	
}
<#macro postMethod actionName actionAlias params>
	// handle ${actionAlias} action
    @RequestMapping(<#if params?length &gt; 0>params="action=${actionAlias}", </#if>method = RequestMethod.POST)
    public String ${entityDefinition.entityClassName}Controller.${actionAlias}(${entityDefinition.entityClassName} ${entityDefinition.entityName?uncap_first}, Model uiModel, HttpServletRequest httpServletRequest) {
	ScreenEntity resultScreenEntity = terminalSession.doAction(TerminalActions.${actionName}(), ${entityDefinition.entityName?uncap_first});
	// go to the controller for the resulting screen name
		if (resultScreenEntity != null){
			String screenEntityName = screenEntitiesRegistry.get(resultScreenEntity.getClass()).getEntityClassName();
			if (httpServletRequest.getParameter("partial") != null){
				${entityDefinition.entityName?uncap_first} = terminalSession.getEntity(${entityDefinition.entityClassName}.class);
		    	uiModel.addAttribute("${entityDefinition.entityName?uncap_first}", ${entityDefinition.entityName?uncap_first});
		        return "${entityDefinition.entityName?cap_first}";
			}
        	return "redirect:" + screenEntityName;
		}
    	return "redirect:/";
		
    }
</#macro>