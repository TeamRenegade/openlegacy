package ${package};

import javax.jws.WebMethod;
import javax.jws.WebResult;
import javax.jws.WebService;

<#assign primitiveTypes = ["byte", "short", "int", "long", "float", "double", "char", "boolean", "Integer", "String", "Boolean", "Long", "Double"]/>

<#assign addedImports = []/>
<#list inputParameters as parameter>
	<#if parameter.entityDefinition??>
		<#if !addedImports?seq_contains(parameter.entityDefinition.packageName + parameter.entityDefinition.entityClassName)>
import ${parameter.entityDefinition.packageName}.${parameter.entityDefinition.entityClassName};
			<#assign addedImports = addedImports + [parameter.entityDefinition.packageName + parameter.entityDefinition.entityClassName]/> 
		</#if>
	</#if>
</#list>

<#list outputParameters as parameter>
	<#if parameter.entityDefinition??>
		<#if !addedImports?seq_contains(parameter.entityDefinition.packageName + parameter.entityDefinition.entityClassName)>
import ${parameter.entityDefinition.packageName}.${parameter.entityDefinition.entityClassName}; 
			<#assign addedImports = addedImports + [parameter.entityDefinition.packageName + parameter.entityDefinition.entityClassName]/>
		</#if> 
	</#if>
</#list>

/**
 *  A service interface and input/oputput definition for a web service.
 *  Defines the contract between the client and server. The client uses the same interface for testing the service via Java code. 
 *  The interface ${serviceName}Service can be customized to enabling passing parameters to the service.     
 */

@WebService
public interface ${serviceName}Service {

	@WebMethod(operationName = "get${serviceName}")
	@WebResult(name = "${serviceName}Output")
	public ${serviceName}Out get${serviceName}(<#if inputParameters?size != 0>${serviceName}In ${serviceName?uncap_first}In</#if>);

	<#if inputParameters?size != 0>
	public static class ${serviceName}In{
		<#assign addedParams = []/>
		<#list inputParameters as parameter>
			<#if parameter.entityDefinition?? && !addedParams?seq_contains(parameter.entityDefinition.entityName)>
		${parameter.entityDefinition.entityName} ${parameter.entityDefinition.entityName?uncap_first};
				<#assign addedParams = addedParams + [parameter.entityDefinition.entityName]/>
			</#if>
		</#list>
		
		<#assign addedParams = []/>
		<#list inputParameters as parameter>
			<#if parameter.entityDefinition?? && !addedParams?seq_contains(parameter.entityDefinition.entityName)>
		public ${parameter.entityDefinition.entityName} get${parameter.entityDefinition.entityName}(){
			return ${parameter.entityDefinition.entityName?uncap_first};
		} 
				<#assign addedParams = addedParams + [parameter.entityDefinition.entityName]/>
			</#if>
		</#list>

	}
	</#if>
	public static class ${serviceName}Out{
		<#assign addedParams = []/>
		<#list outputParameters as parameter>
			<#if parameter.entityDefinition?? && !addedParams?seq_contains(parameter.entityDefinition.entityName)>
		${parameter.entityDefinition.entityName} ${parameter.entityDefinition.entityName?uncap_first}; 
				<#assign addedParams = addedParams + [parameter.entityDefinition.entityName]/>
			</#if>
		</#list>

		<#assign addedParams = []/>
		<#list outputParameters as parameter>
			<#if parameter.entityDefinition?? && !addedParams?seq_contains(parameter.entityDefinition.entityName)>
		public ${parameter.entityDefinition.entityName} get${parameter.entityDefinition.entityName}(){
			return ${parameter.entityDefinition.entityName?uncap_first};
		} 
		public void set${parameter.entityDefinition.entityName}(${parameter.entityDefinition.entityName} ${parameter.entityDefinition.entityName?uncap_first}){
			this.${parameter.entityDefinition.entityName?uncap_first} = ${parameter.entityDefinition.entityName?uncap_first};
		} 
				<#assign addedParams = addedParams + [parameter.entityDefinition.entityName]/>
			</#if>
		</#list>
	}

}
