package ${package};

import javax.jws.WebMethod;
import javax.jws.WebResult;
import javax.jws.WebService;

<#assign primitiveTypes = ["byte", "short", "int", "long", "float", "double", "char", "boolean", "Integer", "String", "Boolean", "Long", "Double"]/>

<#assign addedImports = []/>
<#list inputParameters as parameter>
	<#if parameter.entityDefinition??>
		<#if !addedImports?seq_contains(parameter.entityDefinition.packageName + parameter.entityDefinition.entityClassName)>
import ${parameter.entityDefinition.packageName}.${parameter.entityDefinition.entityClassName};
			<#assign addedImports = addedImports + [parameter.entityDefinition.packageName + parameter.entityDefinition.entityClassName]/> 
		</#if>
	</#if>
	<#if parameter.entityDefinition?? && parameter.fieldDefinition?? && !primitiveTypes?seq_contains(parameter.fieldDefinition.javaTypeName)>
		<#assign import = parameter.entityDefinition.packageName + "." + parameter.entityDefinition.entityClassName + "." + parameter.fieldDefinition.javaTypeName />
		<#if parameter.fieldDefinition.javaTypeName = "Date" && !addedImports?seq_contains("java.util.Date")>
import java.util.Date;
			<#assign addedImports = addedImports + ["java.util.Date"]/> 
		<#elseif parameter.fieldDefinition.javaTypeName != "Date" && !addedImports?seq_contains(import)>
import ${import};
			<#assign addedImports = addedImports + [import]/>
		</#if>
	</#if>
	<#if parameter.partEntityDefinition??>
		<#assign import = parameter.entityDefinition.packageName + "." + parameter.entityDefinition.entityClassName + "." + parameter.partEntityDefinition.partName />
		<#if !addedImports?seq_contains(import)>
import ${import};
			<#assign addedImports = addedImports + [import]/> 
		</#if>
	</#if>
</#list>

<#list outputParameters as parameter>
	<#if parameter.entityDefinition??>
		<#if !addedImports?seq_contains(parameter.entityDefinition.packageName + parameter.entityDefinition.entityClassName)>
import ${parameter.entityDefinition.packageName}.${parameter.entityDefinition.entityClassName}; 
			<#assign addedImports = addedImports + [parameter.entityDefinition.packageName + parameter.entityDefinition.entityClassName]/>
		</#if> 
	</#if>
	<#if parameter.entityDefinition?? && parameter.fieldDefinition?? && !primitiveTypes?seq_contains(parameter.fieldDefinition.javaTypeName)>
		<#assign import = parameter.entityDefinition.packageName + "." + parameter.entityDefinition.entityClassName + "." + parameter.fieldDefinition.javaTypeName />
		<#if parameter.fieldDefinition.javaTypeName = "Date" && !addedImports?seq_contains("java.util.Date")>
import java.util.Date;
			<#assign addedImports = addedImports + ["java.util.Date"]/> 
		<#elseif parameter.fieldDefinition.javaTypeName != "Date" && !addedImports?seq_contains(import)>
import ${import};
			<#assign addedImports = addedImports + [import]/>
		</#if>
	</#if>
	<#if parameter.partEntityDefinition??>
		<#assign import = parameter.entityDefinition.packageName + "." + parameter.entityDefinition.entityClassName + "." + parameter.partEntityDefinition.partName />
		<#if !addedImports?seq_contains(import)>
import ${import};
			<#assign addedImports = addedImports + [import]/> 
		</#if>
	</#if>
</#list>

/**
 *  A service interface and input/oputput definition for a web service.
 *  Defines the contract between the client and server. The client uses the same interface for testing the service via Java code. 
 *  The interface ${serviceName}Service can be customized to enabling passing parameters to the service.     
 */

@WebService
public interface ${serviceName}Service {

	@WebMethod(operationName = "get${serviceName}")
	@WebResult(name = "${serviceName}Output")
	public ${serviceName}Out get${serviceName}(<#if inputParameters?size != 0>${serviceName}In ${serviceName?uncap_first}In</#if>);

	<#if inputParameters?size != 0>
	public static class ${serviceName}In{
		<#assign fields = []/>
		<#list inputParameters as parameter>
			<#if parameter.entityDefinition?? && !fields?seq_contains(parameter.entityDefinition.entityName)>
		${parameter.entityDefinition.entityName} ${parameter.entityDefinition.entityName?uncap_first};
				<#assign fields = fields + [parameter.entityDefinition.entityName]/>
			</#if>
		</#list>
		
		<#assign getters = []/>
		<#list inputParameters as parameter>
			<#if parameter.entityDefinition?? && !getters?seq_contains("get" + parameter.entityDefinition.entityName)>
			<#assign getter = "get" + parameter.entityDefinition.entityName/>
		public ${parameter.entityDefinition.entityName} ${getter}(){
			return ${parameter.entityDefinition.entityName?uncap_first};
		} 
				<#assign getters = getters + [getter]/>
			</#if>
		</#list>
		

		<#list inputParameters as parameter>
			<#if parameter.entityDefinition?? && parameter.fieldDefinition??>
				<#assign entityName = parameter.entityDefinition.entityName/>
				<#assign fieldName = parameter.fieldDefinition.name?cap_first/>
				<#assign fieldNames = fieldName?split(".")/>
				<#if fieldNames?is_sequence && (fieldNames?size > 1)>
					<#assign fieldName = fieldNames[1]/>
				</#if>
				<#assign getter = "get" + fieldName?cap_first/>
				<#if !getters?seq_contains(getter)>
		public ${parameter.fieldDefinition.javaTypeName} ${getter}(){
					<#if fieldNames?is_sequence && (fieldNames?size > 1)>
			return ${entityName?uncap_first}.get${fieldNames[0]?cap_first}().get${fieldName?cap_first}();
					<#else>
			return ${entityName?uncap_first}.get${fieldName?cap_first}();
					</#if>
		}	
					<#assign getters = getters + [getter]/>
				</#if>
			</#if>
		</#list>

		<#list inputParameters as parameter>
			<#if parameter.entityDefinition?? && parameter.partEntityDefinition??>
				<#assign entityName = parameter.entityDefinition.entityName/>
				<#assign partName = parameter.partEntityDefinition.partName />
				<#assign getter = "get" + partName?cap_first/>
				<#if !getters?seq_contains(getter)>
		public ${partName} ${getter}(){
			return ${entityName?uncap_first}.get${partName?cap_first}();
		}	
					<#assign getters = getters + [getter]/>
				</#if>
			</#if>
		</#list>

	}
	</#if>
	public static class ${serviceName}Out{
		<#assign fields = []/>
		<#list outputParameters as parameter>
			<#if parameter.entityDefinition?? && !fields?seq_contains(parameter.entityDefinition.entityName)>
		${parameter.entityDefinition.entityName} ${parameter.entityDefinition.entityName?uncap_first}; 
				<#assign fields = fields + [parameter.entityDefinition.entityName]/>
			</#if>
		</#list>

		<#assign gettersSetters = []/>
		<#list outputParameters as parameter>
			<#if parameter.entityDefinition?? && !gettersSetters?seq_contains(parameter.entityDefinition.entityName)>
		public ${parameter.entityDefinition.entityName} get${parameter.entityDefinition.entityName}(){
			return ${parameter.entityDefinition.entityName?uncap_first};
		} 
		public void set${parameter.entityDefinition.entityName}(${parameter.entityDefinition.entityName} ${parameter.entityDefinition.entityName?uncap_first}){
			this.${parameter.entityDefinition.entityName?uncap_first} = ${parameter.entityDefinition.entityName?uncap_first};
		} 
				<#assign gettersSetters = gettersSetters + [parameter.entityDefinition.entityName]/>
			</#if>
		</#list>

		<#list outputParameters as parameter>
			<#if parameter.entityDefinition?? && parameter.fieldDefinition??>
				<#assign entityName = parameter.entityDefinition.entityName/>
				<#assign fieldName = parameter.fieldDefinition.name?cap_first/>
				<#assign fieldNames = fieldName?split(".")/>
				<#if fieldNames?is_sequence && (fieldNames?size > 1)>
					<#assign fieldName = fieldNames[1]/>
				</#if>
				<#assign getter = "get" + fieldName?cap_first/>
				<#assign setter = "set" + fieldName?cap_first/>
				<#if !gettersSetters?seq_contains(getter)>
		public ${parameter.fieldDefinition.javaTypeName} ${getter}(){
					<#if fieldNames?is_sequence && (fieldNames?size > 1)>
			return ${entityName?uncap_first}.get${fieldNames[0]?cap_first}().get${fieldName?cap_first}();
					<#else>
			return ${entityName?uncap_first}.get${fieldName?cap_first}();
					</#if>
		}	
					<#assign gettersSetters = gettersSetters + [getter]/>
				</#if>
				<#if !gettersSetters?seq_contains(setter)>
		public void ${setter}(${parameter.fieldDefinition.javaTypeName} ${fieldName?uncap_first}){
					<#if fieldNames?is_sequence && (fieldNames?size > 1)>
			this.${entityName?uncap_first}.get${fieldNames[0]}().${setter}(${fieldName?uncap_first});
					<#else>
			this.${entityName?uncap_first}.${setter}(${fieldName?uncap_first});
					</#if>
		}
					<#assign gettersSetters = gettersSetters + [setter]/>
				</#if>
			</#if>
		</#list>

		<#list outputParameters as parameter>
			<#if parameter.entityDefinition?? && parameter.partEntityDefinition??>
				<#assign entityName = parameter.entityDefinition.entityName/>
				<#assign partName = parameter.partEntityDefinition.partName />
				<#assign getter = "get" + partName?cap_first/>
				<#assign setter = "set" + partName?cap_first/>
				<#if !gettersSetters?seq_contains(getter)>
		public ${partName} ${getter}(){
			return ${entityName?uncap_first}.get${partName?cap_first}();
		}	

		public void ${setter}(${partName} ${partName?uncap_first}){
			this.${entityName?uncap_first}.${setter}(${partName?uncap_first});
		}
					<#assign gettersSetters = gettersSetters + [getter]/>
				</#if>
			</#if>
		</#list>
	}

}
