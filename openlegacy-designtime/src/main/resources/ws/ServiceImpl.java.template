package ${package};

<#if inputParameters?size != 0 || outputParameters?size != 0>
import org.openlegacy.terminal.ScreenEntity;
</#if>

import org.openlegacy.terminal.TerminalSession;
import org.openlegacy.modules.login.Login;
<#if generatePool>
import org.openlegacy.terminal.TerminalSessionFactory;
import org.openlegacy.terminal.actions.TerminalAction;
import org.openlegacy.terminal.actions.TerminalActions;
import org.springframework.beans.factory.annotation.Qualifier;
<#else>
</#if>
import javax.inject.Inject;

import javax.jws.WebService;

<#assign addedImports = []/>
<#list inputParameters as parameter>
<#if parameter.entityDefinition??>
	<#if !addedImports?seq_contains(parameter.entityDefinition.packageName + parameter.entityDefinition.entityClassName)>
import ${parameter.entityDefinition.packageName}.${parameter.entityDefinition.entityClassName};
	<#assign addedImports = addedImports + [parameter.entityDefinition.packageName + parameter.entityDefinition.entityClassName]/> 
	</#if>
</#if>
</#list>

<#list outputParameters as parameter>
<#if parameter.entityDefinition??>
	<#if !addedImports?seq_contains(parameter.entityDefinition.packageName + parameter.entityDefinition.entityClassName)>
import ${parameter.entityDefinition.packageName}.${parameter.entityDefinition.entityClassName}; 
	<#assign addedImports = addedImports + [parameter.entityDefinition.packageName + parameter.entityDefinition.entityClassName]/> 
	</#if> 
</#if>
</#list>

<#if inputParameters?size != 0 || outputParameters?size != 0>
<#if !generatePool>
import org.openlegacy.terminal.actions.TerminalActions;
</#if>
import org.openlegacy.terminal.wait_conditions.WaitCondition;
</#if>

/**
 *  A service implementation which invokes OpenLegacy API, and returns a service output.
 *  The code below should be customize to perform a working scenario which goes through the relevant screens.
 *  Can be tested by invoking the test ${serviceName}ServiceTest.
 *  The interface ${serviceName}Service can be customized to enabling passing parameters to the service, and this class can consume the parameters within the relavant screens.    
 */
@WebService(endpointInterface = "${package}.${serviceName}Service")
public class ${serviceName}ServiceImpl implements ${serviceName}Service {

	<#if generatePool>
	@Inject
	@Qualifier("${serviceName?uncap_first}Pool")
	private TerminalSessionFactory terminalSessionFactory;
	<#else>
	@Inject
	private TerminalSession terminalSession;
	</#if>

	@Override
	public ${serviceName}Out get${serviceName}(<#if inputParameters?size != 0>${serviceName}In ${serviceName?uncap_first}In</#if>) {

		<#if generatePool>
		TerminalSession terminalSession = terminalSessionFactory.getSession();		
		</#if>
		try{
			<#if !generatePool>
			terminalSession.getModule(Login.class).login("USER","PASSWORD");
			</#if>
			<#assign addedEntities = [] />
			<#list inputParameters as parameter>
				<#if parameter.entityDefinition??>
					<#assign entityName = parameter.entityDefinition.entityName/>
					<#if !addedEntities?seq_contains(entityName)>

			${entityName} ${entityName?uncap_first} = terminalSession.getEntity(${entityName}.class);
						<#assign addedEntities = addedEntities + [entityName]/>
					</#if>
				</#if>
				<#if parameter.entityDefinition?? && parameter.fieldDefinition??>
					<#assign entityName = parameter.entityDefinition.entityName/>
					<#assign fieldName = parameter.fieldDefinition.name?cap_first/>
					<#assign fieldNames = fieldName?split(".")/>
					<#if fieldNames?is_sequence && (fieldNames?size > 1)>
						<#assign fieldName = fieldNames[1]/>
					</#if>
			${entityName?uncap_first}.set${fieldName?cap_first}(${serviceName?uncap_first}In.get${fieldName?cap_first}());	
				</#if>
				<#if parameter.entityDefinition?? && parameter.partEntityDefinition??>
					<#assign entityName = parameter.entityDefinition.entityName/>
					<#assign partName = parameter.partEntityDefinition.partName?cap_first/>
					<#if !addedEntities?seq_contains(entityName)>
			${entityName} ${entityName?uncap_first} = terminalSession.getEntity(${entityName}.class);
						<#assign addedEntities = addedEntities + [entityName]/>
					</#if>
			${entityName?uncap_first}.set${partName}(${serviceName?uncap_first}In.get${partName}());	
				</#if>
			</#list>
			
			<#assign eNames = []/>
			<#list inputParameters as parameter>
				<#if parameter.entityDefinition?? && !eNames?seq_contains(parameter.entityDefinition.entityName)>
					<#assign eName = parameter.entityDefinition.entityName/>
			terminalSession.doAction(TerminalActions.ENTER(), (ScreenEntity)${eName?uncap_first});
					<#assign eNames = eNames + [eName]/>
				</#if>
			</#list>
			
			${serviceName}Out ${serviceName?uncap_first}Out = new ${serviceName}Out();
			<#assign setterAdded = 0/> 
			<#list outputParameters as parameter>
				<#if parameter.entityDefinition??>
					<#assign entityName = parameter.entityDefinition.entityName/>
					<#if !addedEntities?seq_contains(entityName)>
					
			${entityName} ${entityName?uncap_first} = terminalSession.getEntity(${entityName}.class);
						<#assign addedEntities = addedEntities + [entityName]/>
					</#if>
					<#if setterAdded != 1>
			${serviceName?uncap_first}Out.set${parameter.entityDefinition.entityName}(${parameter.entityDefinition.entityName?uncap_first});
						<#assign setterAdded = 1/>
					</#if>
				</#if>
				<#if parameter.entityDefinition?? && parameter.fieldDefinition??>
					<#assign entityName = parameter.entityDefinition.entityName/>
					<#assign fieldName = parameter.fieldDefinition.name?cap_first/>
					<#assign fieldNames = fieldName?split(".")/>
					<#if !addedEntities?seq_contains(entityName)>
			${entityName} ${entityName?uncap_first} = terminalSession.getEntity(${entityName}.class);
						<#assign addedEntities = addedEntities + [entityName]/>
					</#if>
					<#if fieldNames?is_sequence && (fieldNames?size > 1)>
						<#assign fieldName = fieldNames[1]/>
			${serviceName?uncap_first}Out.set${fieldName?cap_first}(${entityName?uncap_first}.get${fieldNames[0]?cap_first}().get${fieldName?cap_first}());
					<#else>
			${serviceName?uncap_first}Out.set${fieldName?cap_first}(${entityName?uncap_first}.get${fieldName?cap_first}());
					</#if>
				</#if>
				<#if parameter.entityDefinition?? && parameter.partEntityDefinition??>
					<#assign entityName = parameter.entityDefinition.entityName/>
					<#assign partName = parameter.partEntityDefinition.partName?cap_first/>
					<#if !addedEntities?seq_contains(entityName)>
			${entityName} ${entityName?uncap_first} = terminalSession.getEntity(${entityName}.class);
						<#assign addedEntities = addedEntities + [entityName]/>
					</#if>
			${serviceName?uncap_first}Out.set${partName?cap_first}(${entityName?uncap_first}.get${partName?cap_first}());
					</#if>
			</#list>

			<#assign eNames = []/>
			<#list outputParameters as parameter>
				<#if parameter.entityDefinition?? && !eNames?seq_contains(parameter.entityDefinition.entityName)>
					<#assign eName = parameter.entityDefinition.entityName/>
			terminalSession.doAction(TerminalActions.ENTER(), (ScreenEntity)${eName?uncap_first});
					<#assign eNames = eNames + [eName]/>
				</#if>
			</#list>
			
			return ${serviceName?uncap_first}Out;
		<#if generatePool>
		}catch(RuntimeException e){
			terminalSession.disconnect();
			throw(e);
		</#if>
		}finally{
		<#if generatePool>
			terminalSessionFactory.returnSession(terminalSession);
		<#else>
			terminalSession.disconnect();
		</#if>
		}
	}

	<#if generatePool>
	public static class InitAction implements TerminalAction{
		
		public void perform(TerminalSession terminalSession, Object entity,Object... keys){
			//terminalSession.getModule(Login.class).login("USER","PASSWORD");
			// PLACE HOLDER for init action
		}

		@Override
		public boolean isMacro() {
			// TODO Auto-generated method stub
			return false;
		}
	}
	public static class KeepAliveAction implements TerminalAction{
		
		public void perform(TerminalSession terminalSession, Object entity,Object... keys){
			// PLACE HOLDER for keep alive action
		}

		@Override
		public boolean isMacro() {
			// TODO Auto-generated method stub
			return false;
		}
	}
	public static class CleanupAction implements TerminalAction{
		
		public void perform(TerminalSession terminalSession, Object entity,Object... keys){
			//terminalSession.doAction(TerminalActions.F12());
			// PLACE HOLDER for cleanup action
		}

		@Override
		public boolean isMacro() {
			// TODO Auto-generated method stub
			return false;
		}
	}
	</#if> 
}
