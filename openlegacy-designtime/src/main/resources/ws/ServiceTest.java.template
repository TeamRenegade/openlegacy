<#function isFieldParameter parameter>
	<#if parameter.entityDefinition?? && parameter.fieldDefinition??>
		<#return true>
	</#if>
	<#return false>
</#function>
<#function isStringType type>
	<#if ["char", "String"]?seq_contains(type)>
		<#return true>
	</#if>
	<#return false>
</#function>
<#function isDateType type>
	<#if type = "Date">
		<#return true>
	</#if>
	<#return false>
</#function>
<#function isNumberType type>
	<#if ["byte", "byte[]", "short", "int", "long", "float", "double", "Integer", "Long", "Double"]?seq_contains(type)>
		<#return true>
	</#if>
	<#return false>
</#function>
<#function isBooleanType type>
	<#if ["boolean", "Boolean"]?seq_contains(type)>
		<#return true>
	</#if>
	<#return false>
</#function>
package tests;

import java.io.IOException;
import java.io.StringWriter;
import java.text.ParseException;
 
import javax.inject.Inject;
import javax.xml.transform.stream.StreamResult;
 
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.oxm.Marshaller;
import org.springframework.oxm.XmlMappingException;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import ${package}.${serviceName}Service;
import ${package}.${serviceName}Service.*;
<#assign addedImports = []/>
<#assign primitiveTypes = ["byte", "byte[]", "short", "int", "long", "float", "double", "char", "boolean", "Integer", "String", "Boolean", "Long", "Double"]/>
<#list inputParameters as parameter>
	<#if isFieldParameter(parameter)>
		<#if !primitiveTypes?seq_contains(parameter.fieldDefinition.javaTypeName)>
			<#assign import = parameter.entityDefinition.packageName + "." + parameter.entityDefinition.entityClassName + "." + parameter.fieldDefinition.javaTypeName />
			<#if parameter.fieldDefinition.javaTypeName = "Date" && !addedImports?seq_contains("java.util.Date")>
import java.util.Date;
				<#assign addedImports = addedImports + ["java.util.Date"]/> 
			<#elseif parameter.fieldDefinition.javaTypeName != "Date" && !addedImports?seq_contains(import) && !parameter.fieldDefinition.manyToOneDefinition??>
import ${import};
				<#assign addedImports = addedImports + [import]/>
			<#elseif parameter.fieldDefinition.javaTypeName != "Date" && !addedImports?seq_contains(import) && parameter.fieldDefinition.manyToOneDefinition??>
				<#assign import = parameter.entityDefinition.packageName + "." + parameter.fieldDefinition.javaTypeName />
import ${import};
				<#assign addedImports = addedImports + [import]/>
			</#if>
		</#if>
	</#if>
</#list>
/**
 *  A test which invokes ${serviceName} web service via an http client.
 *  The application should be app and running (via run-application.launch)
 *  To run the test, select Run As -> JUnit test.
 *  If the service has parameters, they should be set via the test. 
 */
@ContextConfiguration("/META-INF/spring/applicationContext-test.xml")
@RunWith(SpringJUnit4ClassRunner.class)
public class ${serviceName}ServiceTest {

	@Inject
	@Qualifier("${serviceName?uncap_first}Client")
	private ${serviceName}Service ${serviceName?uncap_first}Client;

	@Inject
	private Marshaller marshaller;
	
	@Test
	public void test${serviceName}Service() throws ParseException, XmlMappingException, IOException {


		long before = System.currentTimeMillis();

		${serviceName}In ${serviceName?uncap_first}In = new ${serviceName}In();
		<#assign fields = []/>
		<#list inputParameters as parameter>
			<#if isFieldParameter(parameter)>
				<#assign fieldName = parameter.fieldDefinition.name?cap_first/>
				<#assign fieldNames = fieldName?split(".")/>
				<#if fieldNames?is_sequence && (fieldNames?size > 1)>
					<#assign fieldName = fieldNames[1]?cap_first/>
				</#if>
				<#if !fields?seq_contains(fieldName)>
					<#assign type = parameter.fieldDefinition.javaTypeName/>
					<#if isStringType(type)>
		${serviceName?uncap_first}In.set${fieldName}("${parameter.fieldDefinition.sampleValue}");
					<#elseif isDateType(type)>
		${serviceName?uncap_first}In.set${fieldName}(new Date(${parameter.fieldDefinition.sampleValue}));
					<#elseif isNumberType(type) || isBooleanType(type)>
		${serviceName?uncap_first}In.set${fieldName}(${parameter.fieldDefinition.sampleValue});
					<#elseif parameter.fieldDefinition?? && parameter.fieldDefinition.manyToOneDefinition??>
		${serviceName?uncap_first}In.set${fieldName}(new ${type}());
					<#else>
		${serviceName?uncap_first}In.set${fieldName}(${type}.valueOf("${parameter.fieldDefinition.sampleValue}"));
					</#if>
					<#assign fields = fields + [fieldName]/>
				</#if>
			</#if>
		</#list>

		${serviceName}Out ${serviceName?uncap_first}Out = ${serviceName?uncap_first}Client.get${serviceName}(${serviceName?uncap_first}In);
		Assert.assertNotNull(${serviceName?uncap_first}Out);

        long after = System.currentTimeMillis();
  		System.out.println("Execution time:" + (after-before));
  				
		StringWriter stringWriter = new StringWriter();
		StreamResult result = new StreamResult(stringWriter);
		marshaller.marshal(${serviceName?uncap_first}Out, result);
		System.out.println(stringWriter.toString());
		
	}

}
