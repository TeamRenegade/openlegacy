package openlegacy;

// This rule remove same fields which exists on different screens. Helps to avoid same identifiers, and set these fields in abstract class if needed.
rule "remove-repeatable-fields"
ruleflow-group "remove-repeatable-fields"
no-loop
when
	$ruleParameterSet			   : RuleParametersSet(ruleId == "remove-repeatable-fields")
	$removeDuplicateFieldsStartRow : Integer()  from (Integer)$ruleParameterSet.getRuleParameters().get("removeDuplicateFieldsStartRow");
	$removeDuplicateFieldsEndRow   : Integer()  from (Integer)$ruleParameterSet.getRuleParameters().get("removeDuplicateFieldsEndRow");
	$removeDuplicateFieldsRegex    : String()  from (String)$ruleParameterSet.getRuleParameters().get("removeDuplicateFieldsRegex");
	
	// there is a screen definition
	$screenEntityDefinition1: ScreenEntityDesigntimeDefinition(window == false)
	// and a snapshot from the 1st screen definition
	$snapshot1: TerminalSnapshot() from $screenEntityDefinition1.getSnapshot()

	// there is another screen definition
	$screenEntityDefinition2: ScreenEntityDesigntimeDefinition(this != $screenEntityDefinition1,window == false)
	
	// and a snapshot from the 1st screen definition
	$snapshot2: TerminalSnapshot() from $screenEntityDefinition2.getSnapshot()

	$field1: TerminalField(position.row >= $removeDuplicateFieldsStartRow,position.row <= $removeDuplicateFieldsEndRow,
							value matches $removeDuplicateFieldsRegex) from $snapshot1.getFields()
							 
	$field2: TerminalField(this == $field1) from $snapshot2.getFields()
then
	DroolsUtil.debug($field1);
	$snapshot1.getFields().remove($field1);
	$snapshot2.getFields().remove($field2);
	update($screenEntityDefinition1);
	update($screenEntityDefinition2);
end
