package openlegacy;

import org.openlegacy.designtime.terminal.analyzer.modules.table.*;

rule "find-columns"
ruleflow-group "identify-tables"
no-loop
salience 100
when
	$ruleParameterSet: RuleParametersSet(ruleId == "identify-tables")
	$notAcolumnRegex  : String()  from (String)$ruleParameterSet.getRuleParameters().get("notAcolumnRegex");
	$minimumTableRows 		: Integer()  from (Integer)$ruleParameterSet.getRuleParameters().get("minimumTableRows");
	$atLeastOneFieldShouldBe : String()  from (String)$ruleParameterSet.getRuleParameters().get("atLeastOneFieldShouldBe");
		
	// there is a screen definition
	$screenEntityDefinition: ScreenEntityDesigntimeDefinition()

	// and a snapshot from the 1st screen definition
	$snapshot: TerminalSnapshot() from $screenEntityDefinition.getSnapshot()
	
	// and there is a field in a specific column (which is not a leading label) 
	$field: TerminalField(value not matches $notAcolumnRegex) from $snapshot.getFields();

	// and there is no field in this column in a higher row 
	not TerminalField(this != $field, position.column == $field.position.column, length == $field.length,position.row < $field.position.row) from $snapshot.getFields();
	
	$columnFields: List(size > 0,size >= $minimumTableRows) from collect(TerminalField(position.column == $field.position.column,length == $field.length,editable == $field.editable) from $snapshot.getFields()) 

	$firstColumnField: TerminalField(this != null) from $columnFields
	not TerminalField(position.row < $firstColumnField.position.row) from $columnFields
	
	$columnFieldsCount: Integer(intValue > 0) from $columnFields.size()
	$lastColumnField: TerminalField(this != null) from $columnFields
	not TerminalField(position.row > $lastColumnField.position.row) from $columnFields
	
	$tableGap: Integer() from ($lastColumnField.getPosition().getRow() - $firstColumnField.getPosition().getRow() + 1)
	Boolean(booleanValue==true) from ($tableGap == $columnFields.size())
	  	
	// and at list one of the columns is not empty
	exists TerminalField(editable == true || value matches $atLeastOneFieldShouldBe) from $columnFields
then

	// if the fields were removed from the snapshot, don't create a column
	if ($snapshot.getFields().contains($columnFields.get(0))) {
		TableColumnFact tableColumnFact = new TableColumnFact($screenEntityDefinition, $columnFields);
		insert(tableColumnFact);
	}
end

rule "find-column-headers"
ruleflow-group "identify-tables"
no-loop
salience 90
when
	// there is a screen definition
	$screenEntityDefinition: ScreenEntityDesigntimeDefinition()

	// and a snapshot from the 1st screen definition
	$snapshot: TerminalSnapshot() from $screenEntityDefinition.getSnapshot()
	
	// there is a column
	$column: TableColumnFact(screenEntityDefinition == $screenEntityDefinition)
	
	$headerFields: List() from collect( TerminalField( this.isEmpty() == false, position.row == $column.getStartRow() - 1,
								position.column >= $column.getStartColumn() - 2,position.column <= $column.getEndColumn() + 2) from $snapshot.getFields() )
then
	$column.getHeaderFields().addAll($headerFields);
end


rule "find-table"
ruleflow-group "identify-tables"
no-loop
salience 80
when
	// there is a column
	$firstColumn: TableColumnFact()

	// which belongs to a screen entity 
	$screenEntityDefinition: ScreenEntityDesigntimeDefinition() from $firstColumn.getScreenEntityDefinition()
	
	not TableColumnFact(screenEntityDefinition == $screenEntityDefinition, startColumn < $firstColumn.startColumn)
	  
	// and there is a list of columns which has a bigger column, start at the same row, and has the same number of fields
	$columns: List(size >= 2) from collect (TableColumnFact(screenEntityDefinition == $screenEntityDefinition,startColumn >= $firstColumn.startColumn ,startRow == $firstColumn.startRow,
														// in AS/400 the last field is shorter then the rest of the column. Also adding columns which there size is smaller in 1   
														eval(fields.size() +1 >= $firstColumn.getFields().size() ) ))
then
	screenEntityDefinitionsBuilder.processFact($screenEntityDefinition,new ScreenTableFact($columns));
	update($screenEntityDefinition);
end

rule "find-table-actions"
ruleflow-group "identify-tables"
no-loop
salience 70
when
	$ruleParameterSet: RuleParametersSet(ruleId == "identify-tables")
	$actionsRegex     : String()  from (String)$ruleParameterSet.getRuleParameters().get("actionsRegex");
	$actionsSplitter  : String()  from (String)$ruleParameterSet.getRuleParameters().get("actionsSplitter");
	$rowsDistance	  : Integer() from (Integer)$ruleParameterSet.getRuleParameters().get("rowsDistance");
	
	$screenEntityDefinition: ScreenEntityDesigntimeDefinition(typeName == "RecordSelectionEntity")
	$tableDefinition: ScreenTableDefinition() from $screenEntityDefinition.getTemporaryTableDefinitions()

	// which has a snapshot
	$snapshot: TerminalSnapshot() from $screenEntityDefinition.getSnapshot()

	$actionsStartRow  : Integer()  from $tableDefinition.getStartRow() - $rowsDistance  
	$actionsEndRow    : Integer()  from $tableDefinition.getEndRow() + $rowsDistance

	$field: TerminalField(position.row >= $actionsStartRow,position.row <= $actionsEndRow) from $snapshot.getFields()
	$captionAction: String(this matches $actionsRegex) from $field.getValue().split($actionsSplitter)
		
then
	int offset = $field.getValue().indexOf($captionAction); 
	TerminalPosition actionPosition = SimpleTerminalPosition.newInstance($field.getPosition().getRow(),$field.getPosition().getColumn()+offset);
	screenEntityDefinitionsBuilder.processFact($screenEntityDefinition,new ScreenTableActionFact($tableDefinition,$captionAction,actionPosition, $actionsRegex));
	update($screenEntityDefinition);
end

