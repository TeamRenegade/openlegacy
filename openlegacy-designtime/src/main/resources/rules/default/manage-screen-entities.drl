package openlegacy;

rule "sort-snapshots"
ruleflow-group "initialize-screen-entities"
no-loop
when
then
	// get all the snapshots provided
	Collection<TerminalSnapshot> snapshots = snapshotsAnalyzerContext.getActiveSnapshots();
	snapshotsOrganizer.add(snapshots);
	
	Collection<Set<TerminalSnapshot>> groups = snapshotsOrganizer.getGroups();
	SnapshotPickerStrategy strategy = new LowestSequenceSnapshotPickerStrategy();
	for (Set<TerminalSnapshot> group : groups){
		// for snapshot, initialize an empty screen definitions container 
		ScreenEntityDesigntimeDefinition screenEntityDefinition = new SimpleScreenEntityDesigntimeDefinition();
		
		// pick 1 representer from each matched group
		TerminalSnapshot s = (TerminalSnapshot)strategy.pickRepresenter(group);
		
		// link the definition to the snapshot
		screenEntityDefinition.setSnapshot(s);
		screenEntityDefinition.setOutgoingSnapshot(snapshotsAnalyzerContext.getOutgoingSnapshot(s));
		screenEntityDefinition.setAllSnapshots(group);
		/// insert the definitions container to the session
		insert(screenEntityDefinition);
	} 
end


rule "finalize-screen-entities"
ruleflow-group "finalize-screen-entities"
when
then
	snapshotsAnalyzerContext.finalizeEntitiesDefinitions();
	Collection screenEntitiesDefinitions = snapshotsAnalyzerContext.getEntitiesDefinitions().values();
	// update the screen entities in the session for further analysis
	for(Object screenEntitiesDefinition : screenEntitiesDefinitions){
		update(screenEntitiesDefinition);
	}  
end