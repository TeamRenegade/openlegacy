// WARNING: DO NOT EDIT THIS FILE.
// You may push code into the target .java compilation unit if you wish to edit any member(s).
package org.openlegacy.as400.menus.web;

import java.util.*;
import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.io.IOUtils;
import org.openlegacy.as400.menus.*;

import java.io.IOException;
import org.openlegacy.modules.table.Table;
import org.openlegacy.modules.table.TableWriter;
import java.net.MalformedURLException;
import java.net.URL;
import java.text.SimpleDateFormat;
import org.springframework.beans.propertyeditors.CustomDateEditor;

import org.openlegacy.terminal.ScreenEntity;
import org.openlegacy.terminal.TerminalSession;
import org.openlegacy.terminal.actions.TerminalActions;
import org.openlegacy.terminal.services.ScreenEntitiesRegistry;
import org.openlegacy.terminal.json.JsonSerializationUtil;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.WebDataBinder;

import org.openlegacy.as400.menus.UserTasks;

privileged @SuppressWarnings("unused") aspect UserTasksController_Aspect {

	@Inject
	private TerminalSession UserTasksController.terminalSession;

	@Inject
	private ScreenEntitiesRegistry UserTasksController.screenEntitiesRegistry;

	
	// handle page initial display
    @RequestMapping(method = RequestMethod.GET)
    public String UserTasksController.show(Model uiModel) {
    	UserTasks userTasks = terminalSession.getEntity(UserTasks.class);
	uiModel.addAttribute("userTasks", userTasks);
	// show the resulting page for UserTasks
        return "UserTasks";
    }

	
    @RequestMapping(value="/help", method = RequestMethod.GET)
    public @ResponseBody String UserTasksController.systemHelp(HttpServletRequest request) throws IOException {
    	URL resource = request.getSession().getServletContext().getResource("/help/UserTasks.html");
    	String result = "";
    	if (resource != null){
    		result = IOUtils.toString(resource.openStream());
    	}
    	return result;
    }

	// handle submit action
    @RequestMapping(method = RequestMethod.POST)
    public String UserTasksController.submit(UserTasks userTasks, Model uiModel, HttpServletRequest httpServletRequest) {
	ScreenEntity resultScreenEntity = terminalSession.doAction(TerminalActions.ENTER(), userTasks);
	// go to the controller for the resulting screen name
		if (resultScreenEntity != null){
			String screenEntityName = screenEntitiesRegistry.get(resultScreenEntity.getClass()).getEntityClassName();
			if (httpServletRequest.getParameter("partial") != null){
				userTasks = terminalSession.getEntity(UserTasks.class);
		    	uiModel.addAttribute("userTasks", userTasks);
		        return "UserTasks";
			}
        	return "redirect:" + screenEntityName;
		}
    	return "redirect:/";
		
    }
    
	// handle exit action
    @RequestMapping(params="action=exit", method = RequestMethod.POST)
    public String UserTasksController.exit(UserTasks userTasks, Model uiModel, HttpServletRequest httpServletRequest) {
	ScreenEntity resultScreenEntity = terminalSession.doAction(TerminalActions.F3(), userTasks);
	// go to the controller for the resulting screen name
		if (resultScreenEntity != null){
			String screenEntityName = screenEntitiesRegistry.get(resultScreenEntity.getClass()).getEntityClassName();
			if (httpServletRequest.getParameter("partial") != null){
				userTasks = terminalSession.getEntity(UserTasks.class);
		    	uiModel.addAttribute("userTasks", userTasks);
		        return "UserTasks";
			}
        	return "redirect:" + screenEntityName;
		}
    	return "redirect:/";
		
    }
	// handle prompt action
    @RequestMapping(params="action=prompt", method = RequestMethod.POST)
    public String UserTasksController.prompt(UserTasks userTasks, Model uiModel, HttpServletRequest httpServletRequest) {
	ScreenEntity resultScreenEntity = terminalSession.doAction(TerminalActions.F4(), userTasks);
	// go to the controller for the resulting screen name
		if (resultScreenEntity != null){
			String screenEntityName = screenEntitiesRegistry.get(resultScreenEntity.getClass()).getEntityClassName();
			if (httpServletRequest.getParameter("partial") != null){
				userTasks = terminalSession.getEntity(UserTasks.class);
		    	uiModel.addAttribute("userTasks", userTasks);
		        return "UserTasks";
			}
        	return "redirect:" + screenEntityName;
		}
    	return "redirect:/";
		
    }
	// handle retrieve action
    @RequestMapping(params="action=retrieve", method = RequestMethod.POST)
    public String UserTasksController.retrieve(UserTasks userTasks, Model uiModel, HttpServletRequest httpServletRequest) {
	ScreenEntity resultScreenEntity = terminalSession.doAction(TerminalActions.F9(), userTasks);
	// go to the controller for the resulting screen name
		if (resultScreenEntity != null){
			String screenEntityName = screenEntitiesRegistry.get(resultScreenEntity.getClass()).getEntityClassName();
			if (httpServletRequest.getParameter("partial") != null){
				userTasks = terminalSession.getEntity(UserTasks.class);
		    	uiModel.addAttribute("userTasks", userTasks);
		        return "UserTasks";
			}
        	return "redirect:" + screenEntityName;
		}
    	return "redirect:/";
		
    }
	// handle cancel action
    @RequestMapping(params="action=cancel", method = RequestMethod.POST)
    public String UserTasksController.cancel(UserTasks userTasks, Model uiModel, HttpServletRequest httpServletRequest) {
	ScreenEntity resultScreenEntity = terminalSession.doAction(TerminalActions.F12(), userTasks);
	// go to the controller for the resulting screen name
		if (resultScreenEntity != null){
			String screenEntityName = screenEntitiesRegistry.get(resultScreenEntity.getClass()).getEntityClassName();
			if (httpServletRequest.getParameter("partial") != null){
				userTasks = terminalSession.getEntity(UserTasks.class);
		    	uiModel.addAttribute("userTasks", userTasks);
		        return "UserTasks";
			}
        	return "redirect:" + screenEntityName;
		}
    	return "redirect:/";
		
    }
	// handle informationAssistant action
    @RequestMapping(params="action=informationAssistant", method = RequestMethod.POST)
    public String UserTasksController.informationAssistant(UserTasks userTasks, Model uiModel, HttpServletRequest httpServletRequest) {
	ScreenEntity resultScreenEntity = terminalSession.doAction(TerminalActions.F1(), userTasks);
	// go to the controller for the resulting screen name
		if (resultScreenEntity != null){
			String screenEntityName = screenEntitiesRegistry.get(resultScreenEntity.getClass()).getEntityClassName();
			if (httpServletRequest.getParameter("partial") != null){
				userTasks = terminalSession.getEntity(UserTasks.class);
		    	uiModel.addAttribute("userTasks", userTasks);
		        return "UserTasks";
			}
        	return "redirect:" + screenEntityName;
		}
    	return "redirect:/";
		
    }
	// handle systemMainMenu action
    @RequestMapping(params="action=systemMainMenu", method = RequestMethod.POST)
    public String UserTasksController.systemMainMenu(UserTasks userTasks, Model uiModel, HttpServletRequest httpServletRequest) {
	ScreenEntity resultScreenEntity = terminalSession.doAction(TerminalActions.F4(), userTasks);
	// go to the controller for the resulting screen name
		if (resultScreenEntity != null){
			String screenEntityName = screenEntitiesRegistry.get(resultScreenEntity.getClass()).getEntityClassName();
			if (httpServletRequest.getParameter("partial") != null){
				userTasks = terminalSession.getEntity(UserTasks.class);
		    	uiModel.addAttribute("userTasks", userTasks);
		        return "UserTasks";
			}
        	return "redirect:" + screenEntityName;
		}
    	return "redirect:/";
		
    }
	
	
	@InitBinder
	public void UserTasksController.initBinder(WebDataBinder binder) {
		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
		dateFormat.setLenient(false);
		binder.registerCustomEditor(Date.class, new CustomDateEditor(dateFormat, false));
	}
	
}
