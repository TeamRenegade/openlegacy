// WARNING: DO NOT EDIT THIS FILE.
// You may push code into the target .java compilation unit if you wish to edit any member(s).
package org.openlegacy.as400.menus.web;

import java.util.*;
import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.io.IOUtils;
import org.openlegacy.as400.menus.*;

import java.io.IOException;
import org.openlegacy.modules.table.Table;
import org.openlegacy.modules.table.TableWriter;
import java.net.MalformedURLException;
import java.net.URL;
import java.text.SimpleDateFormat;
import org.springframework.beans.propertyeditors.CustomDateEditor;

import org.openlegacy.terminal.ScreenEntity;
import org.openlegacy.terminal.TerminalSession;
import org.openlegacy.terminal.actions.TerminalActions;
import org.openlegacy.terminal.services.ScreenEntitiesRegistry;
import org.openlegacy.terminal.json.JsonSerializationUtil;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.WebDataBinder;

import org.openlegacy.as400.menus.WorkWithMessages;

privileged @SuppressWarnings("unused") aspect WorkWithMessagesController_Aspect {

	@Inject
	private TerminalSession WorkWithMessagesController.terminalSession;

	@Inject
	private ScreenEntitiesRegistry WorkWithMessagesController.screenEntitiesRegistry;

	@Inject
	private TableWriter WorkWithMessagesController.tableWriter;
	
	// handle page initial display
    @RequestMapping(method = RequestMethod.GET)
    public String WorkWithMessagesController.show(Model uiModel) {
    	WorkWithMessages workWithMessages = terminalSession.getEntity(WorkWithMessages.class);
	uiModel.addAttribute("workWithMessages", workWithMessages);
	// show the resulting page for WorkWithMessages
        return "WorkWithMessages";
    }

	
    @RequestMapping(value="/help", method = RequestMethod.GET)
    public @ResponseBody String WorkWithMessagesController.systemHelp(HttpServletRequest request) throws IOException {
    	URL resource = request.getSession().getServletContext().getResource("/help/WorkWithMessages.html");
    	String result = "";
    	if (resource != null){
    		result = IOUtils.toString(resource.openStream());
    	}
    	return result;
    }

	// handle submit action
    @RequestMapping(method = RequestMethod.POST)
    public String WorkWithMessagesController.submit(WorkWithMessages workWithMessages, Model uiModel, HttpServletRequest httpServletRequest) {
	ScreenEntity resultScreenEntity = terminalSession.doAction(TerminalActions.ENTER(), workWithMessages);
	// go to the controller for the resulting screen name
		if (resultScreenEntity != null){
			String screenEntityName = screenEntitiesRegistry.get(resultScreenEntity.getClass()).getEntityClassName();
			if (httpServletRequest.getParameter("partial") != null){
				workWithMessages = terminalSession.getEntity(WorkWithMessages.class);
		    	uiModel.addAttribute("workWithMessages", workWithMessages);
		        return "WorkWithMessages";
			}
        	return "redirect:" + screenEntityName;
		}
    	return "redirect:/";
		
    }
    
	// handle displaySystemOperatorMessages action
    @RequestMapping(params="action=displaySystemOperatorMessages", method = RequestMethod.POST)
    public String WorkWithMessagesController.displaySystemOperatorMessages(WorkWithMessages workWithMessages, Model uiModel, HttpServletRequest httpServletRequest) {
	ScreenEntity resultScreenEntity = terminalSession.doAction(TerminalActions.F6(), workWithMessages);
	// go to the controller for the resulting screen name
		if (resultScreenEntity != null){
			String screenEntityName = screenEntitiesRegistry.get(resultScreenEntity.getClass()).getEntityClassName();
			if (httpServletRequest.getParameter("partial") != null){
				workWithMessages = terminalSession.getEntity(WorkWithMessages.class);
		    	uiModel.addAttribute("workWithMessages", workWithMessages);
		        return "WorkWithMessages";
			}
        	return "redirect:" + screenEntityName;
		}
    	return "redirect:/";
		
    }
	// handle removeMessagesNotNeedingAReply action
    @RequestMapping(params="action=removeMessagesNotNeedingAReply", method = RequestMethod.POST)
    public String WorkWithMessagesController.removeMessagesNotNeedingAReply(WorkWithMessages workWithMessages, Model uiModel, HttpServletRequest httpServletRequest) {
	ScreenEntity resultScreenEntity = terminalSession.doAction(TerminalActions.F4(), workWithMessages);
	// go to the controller for the resulting screen name
		if (resultScreenEntity != null){
			String screenEntityName = screenEntitiesRegistry.get(resultScreenEntity.getClass()).getEntityClassName();
			if (httpServletRequest.getParameter("partial") != null){
				workWithMessages = terminalSession.getEntity(WorkWithMessages.class);
		    	uiModel.addAttribute("workWithMessages", workWithMessages);
		        return "WorkWithMessages";
			}
        	return "redirect:" + screenEntityName;
		}
    	return "redirect:/";
		
    }
	// handle top action
    @RequestMapping(params="action=top", method = RequestMethod.POST)
    public String WorkWithMessagesController.top(WorkWithMessages workWithMessages, Model uiModel, HttpServletRequest httpServletRequest) {
	ScreenEntity resultScreenEntity = terminalSession.doAction(TerminalActions.F5(), workWithMessages);
	// go to the controller for the resulting screen name
		if (resultScreenEntity != null){
			String screenEntityName = screenEntitiesRegistry.get(resultScreenEntity.getClass()).getEntityClassName();
			if (httpServletRequest.getParameter("partial") != null){
				workWithMessages = terminalSession.getEntity(WorkWithMessages.class);
		    	uiModel.addAttribute("workWithMessages", workWithMessages);
		        return "WorkWithMessages";
			}
        	return "redirect:" + screenEntityName;
		}
    	return "redirect:/";
		
    }
	// handle previous action
    @RequestMapping(params="action=previous", method = RequestMethod.POST)
    public String WorkWithMessagesController.previous(WorkWithMessages workWithMessages, Model uiModel, HttpServletRequest httpServletRequest) {
	ScreenEntity resultScreenEntity = terminalSession.doAction(TerminalActions.PAGEUP(), workWithMessages);
	// go to the controller for the resulting screen name
		if (resultScreenEntity != null){
			String screenEntityName = screenEntitiesRegistry.get(resultScreenEntity.getClass()).getEntityClassName();
			if (httpServletRequest.getParameter("partial") != null){
				workWithMessages = terminalSession.getEntity(WorkWithMessages.class);
		    	uiModel.addAttribute("workWithMessages", workWithMessages);
		        return "WorkWithMessages";
			}
        	return "redirect:" + screenEntityName;
		}
    	return "redirect:/";
		
    }
	// handle next action
    @RequestMapping(params="action=next", method = RequestMethod.POST)
    public String WorkWithMessagesController.next(WorkWithMessages workWithMessages, Model uiModel, HttpServletRequest httpServletRequest) {
	ScreenEntity resultScreenEntity = terminalSession.doAction(TerminalActions.PAGEDOWN(), workWithMessages);
	// go to the controller for the resulting screen name
		if (resultScreenEntity != null){
			String screenEntityName = screenEntitiesRegistry.get(resultScreenEntity.getClass()).getEntityClassName();
			if (httpServletRequest.getParameter("partial") != null){
				workWithMessages = terminalSession.getEntity(WorkWithMessages.class);
		    	uiModel.addAttribute("workWithMessages", workWithMessages);
		        return "WorkWithMessages";
			}
        	return "redirect:" + screenEntityName;
		}
    	return "redirect:/";
		
    }
	
	// export to excel
    @RequestMapping(value="/excel", method = RequestMethod.GET)
    public void WorkWithMessagesController.excel(HttpServletResponse response) throws IOException {
    	List<WorkWithMessages.WorkWithMessagesRecord> records = terminalSession.getModule(Table.class).collectOne(WorkWithMessages.class,WorkWithMessages.WorkWithMessagesRecord.class);
		response.setContentType("application/vnd.ms-excel");
		response.addHeader("Content-Disposition", "attachment; filename=\"WorkWithMessages.xls\"");
    	tableWriter.writeTable(records, response.getOutputStream());
    }
	
	
	
	@InitBinder
	public void WorkWithMessagesController.initBinder(WebDataBinder binder) {
		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
		dateFormat.setLenient(false);
		binder.registerCustomEditor(Date.class, new CustomDateEditor(dateFormat, false));
	}
	
}
