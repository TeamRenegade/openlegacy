// WARNING: DO NOT EDIT THIS FILE.
// You may push code into the target .java compilation unit if you wish to edit any member(s).
package org.openlegacy.terminal.samples.mvc.controllers;

import java.util.*;
import org.apache.commons.io.IOUtils;
import org.openlegacy.terminal.ScreenEntity;
import org.openlegacy.terminal.TerminalSession;
import org.openlegacy.terminal.actions.TerminalActions;
import org.openlegacy.terminal.samples.model.WorkWithWarehouseDetails1;
import org.openlegacy.terminal.services.ScreenEntitiesRegistry;
import org.openlegacy.terminal.web.JsonSerializationUtil;
import org.springframework.beans.propertyeditors.CustomDateEditor;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.ui.Model;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import java.io.IOException;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Map;

import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;

privileged @SuppressWarnings("unused") aspect WorkWithWarehouseDetails1Controller_Aspect {

	@Inject
	private TerminalSession WorkWithWarehouseDetails1Controller.terminalSession;

	@Inject
	private ScreenEntitiesRegistry WorkWithWarehouseDetails1Controller.screenEntitiesRegistry;

	// handle page initial display
    @RequestMapping(method = RequestMethod.GET)
    public String WorkWithWarehouseDetails1Controller.show(Model uiModel) {
    	WorkWithWarehouseDetails1 workWithWarehouseDetails1 = terminalSession.getEntity(WorkWithWarehouseDetails1.class);
	uiModel.addAttribute("workWithWarehouseDetails1", workWithWarehouseDetails1);
	// show the resulting page for WorkWithWarehouseDetails1
        return "WorkWithWarehouseDetails1";
    }

    @RequestMapping(value="/help", method = RequestMethod.GET)
    public @ResponseBody String WorkWithWarehouseDetails1Controller.systemHelp(HttpServletRequest request) throws IOException {
    	URL resource = request.getSession().getServletContext().getResource("/help/WorkWithWarehouseDetails1.html");
    	String result = "";
    	if (resource != null){
    		result = IOUtils.toString(resource.openStream());
    	}
    	return result;
    }
    
	// handle submit action
    @RequestMapping(method = RequestMethod.POST)
    public String WorkWithWarehouseDetails1Controller.submit(WorkWithWarehouseDetails1 workWithWarehouseDetails1, Model uiModel, HttpServletRequest httpServletRequest) {
	ScreenEntity resultScreenEntity = terminalSession.doAction(TerminalActions.ENTER(), workWithWarehouseDetails1);
	// go to the controller for the resulting screen name
		if (resultScreenEntity != null){
			String screenEntityName = screenEntitiesRegistry.get(resultScreenEntity.getClass()).getEntityClassName();
			if (httpServletRequest.getParameter("partial") != null){
				workWithWarehouseDetails1 = terminalSession.getEntity(WorkWithWarehouseDetails1.class);
		    	uiModel.addAttribute("workWithWarehouseDetails1", workWithWarehouseDetails1);
		        return "WorkWithWarehouseDetails1";
			}
        	return "redirect:" + screenEntityName;
		}
    	return "redirect:/";
		
    }
    
	// handle help action
    @RequestMapping(params="action=help", method = RequestMethod.POST)
    public String WorkWithWarehouseDetails1Controller.help(WorkWithWarehouseDetails1 workWithWarehouseDetails1, Model uiModel, HttpServletRequest httpServletRequest) {
	ScreenEntity resultScreenEntity = terminalSession.doAction(TerminalActions.F1(), workWithWarehouseDetails1);
	// go to the controller for the resulting screen name
		if (resultScreenEntity != null){
			String screenEntityName = screenEntitiesRegistry.get(resultScreenEntity.getClass()).getEntityClassName();
			if (httpServletRequest.getParameter("partial") != null){
				workWithWarehouseDetails1 = terminalSession.getEntity(WorkWithWarehouseDetails1.class);
		    	uiModel.addAttribute("workWithWarehouseDetails1", workWithWarehouseDetails1);
		        return "WorkWithWarehouseDetails1";
			}
        	return "redirect:" + screenEntityName;
		}
    	return "redirect:/";
		
    }
	// handle prompt action
    @RequestMapping(params="action=prompt", method = RequestMethod.POST)
    public String WorkWithWarehouseDetails1Controller.prompt(WorkWithWarehouseDetails1 workWithWarehouseDetails1, Model uiModel, HttpServletRequest httpServletRequest) {
	ScreenEntity resultScreenEntity = terminalSession.doAction(TerminalActions.F4(), workWithWarehouseDetails1);
	// go to the controller for the resulting screen name
		if (resultScreenEntity != null){
			String screenEntityName = screenEntitiesRegistry.get(resultScreenEntity.getClass()).getEntityClassName();
			if (httpServletRequest.getParameter("partial") != null){
				workWithWarehouseDetails1 = terminalSession.getEntity(WorkWithWarehouseDetails1.class);
		    	uiModel.addAttribute("workWithWarehouseDetails1", workWithWarehouseDetails1);
		        return "WorkWithWarehouseDetails1";
			}
        	return "redirect:" + screenEntityName;
		}
    	return "redirect:/";
		
    }
	// handle cancel action
    @RequestMapping(params="action=cancel", method = RequestMethod.POST)
    public String WorkWithWarehouseDetails1Controller.cancel(WorkWithWarehouseDetails1 workWithWarehouseDetails1, Model uiModel, HttpServletRequest httpServletRequest) {
	ScreenEntity resultScreenEntity = terminalSession.doAction(TerminalActions.F12(), workWithWarehouseDetails1);
	// go to the controller for the resulting screen name
		if (resultScreenEntity != null){
			String screenEntityName = screenEntitiesRegistry.get(resultScreenEntity.getClass()).getEntityClassName();
			if (httpServletRequest.getParameter("partial") != null){
				workWithWarehouseDetails1 = terminalSession.getEntity(WorkWithWarehouseDetails1.class);
		    	uiModel.addAttribute("workWithWarehouseDetails1", workWithWarehouseDetails1);
		        return "WorkWithWarehouseDetails1";
			}
        	return "redirect:" + screenEntityName;
		}
    	return "redirect:/";
		
    }
	// handle delete action
    @RequestMapping(params="action=delete", method = RequestMethod.POST)
    public String WorkWithWarehouseDetails1Controller.delete(WorkWithWarehouseDetails1 workWithWarehouseDetails1, Model uiModel, HttpServletRequest httpServletRequest) {
	ScreenEntity resultScreenEntity = terminalSession.doAction(TerminalActions.F2(), workWithWarehouseDetails1);
	// go to the controller for the resulting screen name
		if (resultScreenEntity != null){
			String screenEntityName = screenEntitiesRegistry.get(resultScreenEntity.getClass()).getEntityClassName();
			if (httpServletRequest.getParameter("partial") != null){
				workWithWarehouseDetails1 = terminalSession.getEntity(WorkWithWarehouseDetails1.class);
		    	uiModel.addAttribute("workWithWarehouseDetails1", workWithWarehouseDetails1);
		        return "WorkWithWarehouseDetails1";
			}
        	return "redirect:" + screenEntityName;
		}
    	return "redirect:/";
		
    }
	
	
	// handle ajax request for warehouseType field
	@RequestMapping(value="/warehouseType", method = RequestMethod.GET)
    @ResponseBody
	public ResponseEntity<String> WorkWithWarehouseDetails1Controller.WarehouseTypeJson() {
    	WorkWithWarehouseDetails1 workWithWarehouseDetails1 = terminalSession.getEntity(WorkWithWarehouseDetails1.class);
    	
		HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/text; charset=utf-8");
		Map<Object,Object> warehouseTypeValues = workWithWarehouseDetails1.getWarehouseTypeValues();
		
		String result = JsonSerializationUtil.toDojoFormat(warehouseTypeValues);
        return new ResponseEntity<String>(result, headers, HttpStatus.OK);
    }
	
	@InitBinder
	public void WorkWithWarehouseDetails1Controller.initBinder(WebDataBinder binder) {
		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
		dateFormat.setLenient(false);
		binder.registerCustomEditor(Date.class, new CustomDateEditor(dateFormat, false));
	}
	
}
